[
  {
    "name": "x",
    "nickname": "null",
    "type": "null",
    "scope": {
      "enclosingMethod": "private void nestedMethod(int[] alias)",
      "varName": "x"
    },
    "history": [
      {
        "statement": "alias[0] \u003d -1;",
        "enclosingClass": "SimpleTest",
        "enclosingMethod": "private void nestedMethod(int[] alias)",
        "value": "[\n  -1,\n  5,\n  6\n]",
        "line": 38
      }
    ]
  },
  {
    "name": "y",
    "nickname": "y",
    "type": "int[]",
    "scope": {
      "enclosingMethod": "public Double calc()",
      "varName": "y"
    },
    "history": [
      {
        "statement": "int[] y \u003d x;",
        "enclosingClass": "SimpleTest",
        "enclosingMethod": "public Double calc()",
        "value": "[\n  1,\n  2,\n  3\n]",
        "line": 25
      },
      {
        "statement": "x \u003d y;",
        "enclosingClass": "SimpleTest",
        "enclosingMethod": "public Double calc()",
        "value": "[\n  1,\n  2,\n  3\n]",
        "line": 27
      },
      {
        "statement": "y[0] \u003d 200;",
        "enclosingClass": "SimpleTest",
        "enclosingMethod": "public Double calc()",
        "value": "[\n  200,\n  2,\n  3\n]",
        "line": 28
      },
      {
        "statement": "x[1] \u003d 300;",
        "enclosingClass": "SimpleTest",
        "enclosingMethod": "public Double calc()",
        "value": "[\n  200,\n  300,\n  3\n]",
        "line": 29
      },
      {
        "statement": "z[2] \u003d 400;",
        "enclosingClass": "SimpleTest",
        "enclosingMethod": "public Double calc()",
        "value": "[\n  200,\n  300,\n  400\n]",
        "line": 30
      },
      {
        "statement": "y \u003d new int[] { 7, 8, 9 };",
        "enclosingClass": "SimpleTest",
        "enclosingMethod": "public Double calc()",
        "value": "[\n  7,\n  8,\n  9\n]",
        "line": 32
      }
    ]
  },
  {
    "name": "x",
    "nickname": "x",
    "type": "int[]",
    "scope": {
      "enclosingMethod": "public Double calc()",
      "varName": "x"
    },
    "history": [
      {
        "statement": "int[] x;",
        "enclosingClass": "SimpleTest",
        "enclosingMethod": "public Double calc()",
        "value": "\"uninitialized\"",
        "line": 22
      },
      {
        "statement": "x \u003d null;",
        "enclosingClass": "SimpleTest",
        "enclosingMethod": "public Double calc()",
        "value": "null",
        "line": 23
      },
      {
        "statement": "x \u003d new int[] { 1, 2, 3 };",
        "enclosingClass": "SimpleTest",
        "enclosingMethod": "public Double calc()",
        "value": "[\n  1,\n  2,\n  3\n]",
        "line": 24
      },
      {
        "statement": "x \u003d y;",
        "enclosingClass": "SimpleTest",
        "enclosingMethod": "public Double calc()",
        "value": "[\n  1,\n  2,\n  3\n]",
        "line": 27
      },
      {
        "statement": "y[0] \u003d 200;",
        "enclosingClass": "SimpleTest",
        "enclosingMethod": "public Double calc()",
        "value": "[\n  200,\n  2,\n  3\n]",
        "line": 28
      },
      {
        "statement": "x[1] \u003d 300;",
        "enclosingClass": "SimpleTest",
        "enclosingMethod": "public Double calc()",
        "value": "[\n  200,\n  300,\n  3\n]",
        "line": 29
      },
      {
        "statement": "z[2] \u003d 400;",
        "enclosingClass": "SimpleTest",
        "enclosingMethod": "public Double calc()",
        "value": "[\n  200,\n  300,\n  400\n]",
        "line": 30
      },
      {
        "statement": "x \u003d new int[] { 4, 5, 6 };",
        "enclosingClass": "SimpleTest",
        "enclosingMethod": "public Double calc()",
        "value": "[\n  4,\n  5,\n  6\n]",
        "line": 31
      }
    ]
  },
  {
    "name": "a",
    "nickname": "a",
    "type": "double",
    "scope": {
      "enclosingMethod": "public Double calc()",
      "varName": "a"
    },
    "history": [
      {
        "statement": "double a \u003d -1;",
        "enclosingClass": "SimpleTest",
        "enclosingMethod": "public Double calc()",
        "value": "-1.0",
        "line": 19
      },
      {
        "statement": "a \u003d 4;",
        "enclosingClass": "SimpleTest",
        "enclosingMethod": "public Double calc()",
        "value": "4.0",
        "line": 20
      }
    ]
  },
  {
    "name": "x",
    "nickname": "x",
    "type": "int",
    "scope": {
      "enclosingMethod": "public void helloWorld()",
      "varName": "x"
    },
    "history": [
      {
        "statement": "int x;",
        "enclosingClass": "SimpleTest",
        "enclosingMethod": "public void helloWorld()",
        "value": "\"uninitialized\"",
        "line": 44
      },
      {
        "statement": "for (x \u003d 100; x \u003c 103; x++) {\r    x++;\r}",
        "enclosingClass": "SimpleTest",
        "enclosingMethod": "public void helloWorld()",
        "value": "100",
        "line": 45
      },
      {
        "statement": "for (x \u003d 100; x \u003c 103; x++) {\r    x++;\r}",
        "enclosingClass": "SimpleTest",
        "enclosingMethod": "public void helloWorld()",
        "value": "100",
        "line": 45
      },
      {
        "statement": "x++;",
        "enclosingClass": "SimpleTest",
        "enclosingMethod": "public void helloWorld()",
        "value": "101",
        "line": 46
      },
      {
        "statement": "for (x \u003d 100; x \u003c 103; x++) {\r    x++;\r}",
        "enclosingClass": "SimpleTest",
        "enclosingMethod": "public void helloWorld()",
        "value": "102",
        "line": 45
      },
      {
        "statement": "for (x \u003d 100; x \u003c 103; x++) {\r    x++;\r}",
        "enclosingClass": "SimpleTest",
        "enclosingMethod": "public void helloWorld()",
        "value": "102",
        "line": 45
      },
      {
        "statement": "x++;",
        "enclosingClass": "SimpleTest",
        "enclosingMethod": "public void helloWorld()",
        "value": "103",
        "line": 46
      }
    ]
  }
]